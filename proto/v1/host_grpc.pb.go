// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/v1/host.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HostInfoServiceClient is the client API for HostInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HostInfoServiceClient interface {
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
}

type hostInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHostInfoServiceClient(cc grpc.ClientConnInterface) HostInfoServiceClient {
	return &hostInfoServiceClient{cc}
}

func (c *hostInfoServiceClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, "/proto.v1.HostInfoService/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostInfoServiceServer is the server API for HostInfoService service.
// All implementations must embed UnimplementedHostInfoServiceServer
// for forward compatibility
type HostInfoServiceServer interface {
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
	mustEmbedUnimplementedHostInfoServiceServer()
}

// UnimplementedHostInfoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHostInfoServiceServer struct {
}

func (UnimplementedHostInfoServiceServer) Info(context.Context, *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedHostInfoServiceServer) mustEmbedUnimplementedHostInfoServiceServer() {}

// UnsafeHostInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostInfoServiceServer will
// result in compilation errors.
type UnsafeHostInfoServiceServer interface {
	mustEmbedUnimplementedHostInfoServiceServer()
}

func RegisterHostInfoServiceServer(s grpc.ServiceRegistrar, srv HostInfoServiceServer) {
	s.RegisterService(&HostInfoService_ServiceDesc, srv)
}

func _HostInfoService_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostInfoServiceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.v1.HostInfoService/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostInfoServiceServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HostInfoService_ServiceDesc is the grpc.ServiceDesc for HostInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HostInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.v1.HostInfoService",
	HandlerType: (*HostInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _HostInfoService_Info_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/host.proto",
}
